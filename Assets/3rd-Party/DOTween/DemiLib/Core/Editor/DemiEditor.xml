<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DemiEditor</name>
    </assembly>
    <members>
        <member name="T:DG.DemiEditor.Core.DeGUIScope">
            <summary>
            Replicates Unity's GUI.Scope with Unity versions older than 5.X.
            Thanks to Dmitriy Yukhanov for pointing this out and creating an initial version
            (which I meant to use until we discovered Unity had implemented it too)
            </summary>
        </member>
        <member name="T:DG.DemiEditor.DeEditorFileUtils">
            <summary>
            File utils
            </summary>
        </member>
        <member name="F:DG.DemiEditor.DeEditorFileUtils.ADBPathSlash">
            <summary>Path slash for AssetDatabase format</summary>
        </member>
        <member name="F:DG.DemiEditor.DeEditorFileUtils.ADBPathSlashToReplace">
            <summary>Path slash to replace for AssetDatabase format</summary>
        </member>
        <member name="F:DG.DemiEditor.DeEditorFileUtils.PathSlash">
            <summary>Current OS path slash</summary>
        </member>
        <member name="F:DG.DemiEditor.DeEditorFileUtils.PathSlashToReplace">
            <summary>Path slash to replace on current OS</summary>
        </member>
        <member name="P:DG.DemiEditor.DeEditorFileUtils.projectPath">
            <summary>
            Full path to project directory, without final slash.
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeEditorFileUtils.assetsPath">
            <summary>
            Full path to project's Assets directory, without final slash.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.ADBPathToFullPath(System.String)">
            <summary>
            Converts the given project-relative path to a full path
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.FullPathToADBPath(System.String)">
            <summary>
            Converts the given full path to a project-relative path
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.AssetExists(System.String)">
            <summary>
            Returns TRUE if the file/directory at the given path exists.
            </summary>
            <param name="adbPath">Path, relative to Unity's project folder</param>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.ConvertToValidFilename(System.String)">
            <summary>
            Converts the given string to a valid filename and returns it.
            Beware: doesn't check for reserved words
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.GUIDToExistingAssetPath(System.String)">
            <summary>
            Returns the asset path of the given GUID (relative to Unity project's folder),
            or an empty string if either the GUID is invalid or the related path doesn't exist.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.IsEmpty(System.String)">
            <summary>
            Checks if the given directory (full path) is empty or not
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.MakeEmpty(System.String)">
            <summary>
            Deletes all files and subdirectories from the given directory
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.MonoInstanceADBPath(UnityEngine.ScriptableObject)">
            <summary>Returns the adb path to the given ScriptableObject</summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.MonoInstanceADBPath(UnityEngine.MonoBehaviour)">
            <summary>Returns the adb path to the given MonoBehaviour</summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.MonoInstanceADBDir(UnityEngine.ScriptableObject)">
            <summary>Returns the adb directory that contains the given ScriptableObject without final slash</summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.MonoInstanceADBDir(UnityEngine.MonoBehaviour)">
            <summary>Returns the adb directory that contains the given MonoBehaviour without final slash</summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.SelectedADBDirs">
            <summary>
            Returns the adb paths to the selected folders in the Project panel, or NULL if there is none.
            Contrary to Selection.activeObject, which only returns folders selected in the right side of the panel,
            this method also works with folders selected in the left side.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.SetScriptExecutionOrder(UnityEngine.MonoBehaviour,System.Int32)">
            <summary>
            Sets the script execution order of the given MonoBehaviour
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorFileUtils.GetScriptExecutionOrder(UnityEngine.MonoBehaviour)">
            <summary>
            Gets the script execution order of the given MonoBehaviour
            </summary>
        </member>
        <member name="T:DG.DemiEditor.DeEditorPanelUtils">
            <summary>
            Utilities for Editor Panels.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorPanelUtils.ConnectToSourceAsset``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            Connects to a <see cref="T:UnityEngine.ScriptableObject"/> asset.
            If the asset already exists at the given path, loads it and returns it.
            Otherwise, depending on the given parameters, either returns NULL or automatically creates it before loading and returning it.
            </summary>
            <typeparam name="T">Asset type</typeparam>
            <param name="adbFilePath">File path (relative to Unity's project folder)</param>
            <param name="createIfMissing">If TRUE and the requested asset doesn't exist, forces its creation</param>
            <param name="createFoldersIfMissing">If TRUE also creates the path folders if they don't exist</param>
        </member>
        <member name="M:DG.DemiEditor.DeEditorPanelUtils.SetWindowTitle(UnityEditor.EditorWindow,UnityEngine.Texture,System.String)">
            <summary>
            Sets the icon and title of an editor window. Works with older versions of Unity, where the titleContent property wasn't available.
            </summary>
            <param name="editor">Reference to the editor panel whose icon to set</param>
            <param name="icon">Icon to apply</param>
            <param name="title">Title. If NULL doesn't change it</param>
        </member>
        <member name="T:DG.DemiEditor.DeEditorPrefabUtils">
            <summary>
            Prefab utilities
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorPrefabUtils.ApplyPrefabInstanceModifications(UnityEngine.GameObject)">
            <summary>
            Behaves as the Inspector's Apply button, applying any modification of this instance to the prefab parent
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:DG.DemiEditor.DeEditorPrefabUtils.BreakPrefabInstances(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Completely removes any prefab connection from the given prefab instances.
            <para>
            Based on RodGreen's method (http://forum.unity3d.com/threads/82883-Breaking-connection-from-gameObject-to-prefab-for-good.?p=726602&amp;viewfull=1#post726602)
            </para>
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorPrefabUtils.BreakPrefabInstance(UnityEngine.GameObject)">
            <summary>
            Completely removes any prefab connection from the given prefab instance.
            <para>
            Based on RodGreen's method (http://forum.unity3d.com/threads/82883-Breaking-connection-from-gameObject-to-prefab-for-good.?p=726602&amp;viewfull=1#post726602)
            </para>
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorUtils.DelayedCall(System.Single,System.Action)">
            <summary>Calls the given action after the given delay</summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorUtils.GetGameViewSize">
            <summary>
            Return the size of the editor game view, eventual extra bars excluded (meaning the true size of the game area)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DG.DemiEditor.DeEditorUtils.ClearConsole">
            <summary>
            Clears all logs from Unity's console
            </summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.NoDrag">
            <summary>Nothing is being dragged</summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.Dragging">
            <summary>Dragging</summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.Accepted">
            <summary>Dragging concluced and accepted</summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.Ineffective">
            <summary>Dragging concluced but item position didn't change</summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.Canceled">
            <summary>Dragging canceled</summary>
        </member>
        <member name="F:DG.DemiEditor.DeDragResultType.Click">
            <summary>Dragging concluced but not accepted because too short</summary>
        </member>
        <member name="T:DG.DemiEditor.DeGUIDrag">
            <summary>
            Manages the dragging of GUI elements
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeGUIDrag.isDragging">
            <summary>
            True if a GUI element is currently being dragged
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeGUIDrag.draggedItem">
            <summary>
            Return the current item being dragged, or NULL if there is none
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeGUIDrag.draggedItemType">
            <summary>
            Type of current item being dragged, or NULL if there is none
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeGUIDrag.draggedItemOriginalIndex">
            <summary>
            Starting index of current item being dragged, or NULL if there is none
            </summary>
        </member>
        <member name="P:DG.DemiEditor.DeGUIDrag.optionalDragData">
            <summary>
            Retrieves the eventual optional data stored via the StartDrag method
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUIDrag.StartDrag(System.Int32,UnityEditor.Editor,System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Starts a drag operation on a GUI element.
            </summary>
            <param name="dragId">ID for this drag operation (must be the same for both StartDrag and Drag</param>
            <param name="editor">Reference to the current editor drawing the GUI (used when a Repaint is needed)</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="optionalData">Optional data that can be retrieved via the <see cref="P:DG.DemiEditor.DeGUIDrag.optionalDragData"/> static property</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUIDrag.StartDrag(System.Int32,UnityEditor.EditorWindow,System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Starts a drag operation on a GUI element.
            </summary>
            <param name="dragId">ID for this drag operation (must be the same for both StartDrag and Drag</param>
            <param name="editorWindow">Reference to the current editor drawing the GUI (used when a Repaint is needed)</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="optionalData">Optional data that can be retrieved via the <see cref="P:DG.DemiEditor.DeGUIDrag.optionalDragData"/> static property</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUIDrag.Drag(System.Int32,System.Collections.IList,System.Int32)">
            <summary>
            Call this after each draggable GUI block, to calculate and draw the current drag state
            (or complete it if the mouse was released).
            </summary>
            <param name="dragId">ID for this drag operation (must be the same for both StartDrag and Drag</param>
            <param name="draggableList">List containing the draggable item and all other relative draggable items</param>
            <param name="currDraggableItemIndex">Current index of the draggable item being drawn</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUIDrag.Drag(System.Int32,System.Collections.IList,System.Int32,UnityEngine.Color)">
            <summary>
            Call this after each draggable GUI block, to calculate and draw the current drag state
            (or complete it if the mouse was released).
            </summary>
            <param name="dragId">ID for this drag operation (must be the same for both StartDrag and Drag</param>
            <param name="draggableList">List containing the draggable item and all other relative draggable items</param>
            <param name="currDraggableItemIndex">Current index of the draggable item being drawn</param>
            <param name="dragEvidenceColor">Color to use for drag divider and selection</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUIDrag.EndDrag(System.Boolean)">
            <summary>
            Ends the drag operations, and eventually applies the drag outcome.
            Returns TRUE if the position of the dragged item actually changed.
            Called automatically by Drag method. Use it only if you want to force the end of a drag operation.
            </summary>
            <param name="applyDrag">If TRUE applies the drag results, otherwise simply cancels the drag</param>
        </member>
        <member name="T:DG.DemiEditor.DeSkinStyle">
            <summary>
            Contains both free and pro skins GUIStyle variations,
            and automatically returns the correct one when converted to GUIStyle
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorSoundUtils.Play(UnityEngine.AudioClip)">
            <summary>
            Plays the given clip in the Editor
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorSoundUtils.Stop(UnityEngine.AudioClip)">
            <summary>
            Stops playing the given clip.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeEditorSoundUtils.StopAll">
            <summary>
            Stops all clips playing.
            </summary>
        </member>
        <member name="T:DG.DemiEditor.AssemblyExtensions">
            <summary>
            Assembly extensions
            </summary>
        </member>
        <member name="M:DG.DemiEditor.AssemblyExtensions.ADBDir(System.Reflection.Assembly)">
            <summary>AssetDatabase path to the assembly directory, without final slash</summary>
        </member>
        <member name="T:DG.DemiEditor.GUIStyleExtensions">
            <summary>
            GUI extension methods
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Clone(UnityEngine.GUIStyle,System.Object[])">
            <summary>
            Clones the style and adds the given formats to it. You can pass any of these types of values:
            <list type="bullet">
            <item><term>Format:</term><description>Rich-text, wordwrap</description></item>
            <item><term>FontStyle:</term><description>Font style</description></item>
            <item><term>TextAnchor:</term><description>Content anchor</description></item>
            <item><term>int:</term><description>Font size</description></item>
            <item><term>Color/DeSkinColor:</term><description>Font color</description></item>
            </list>
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Add(UnityEngine.GUIStyle,System.Object[])">
            <summary>
            Adds the given formats to the style. You can pass any of these types of values:
            <list type="bullet">
            <item><term>Format:</term><description>RichText, WordWrap</description></item>
            <item><term>FontStyle:</term><description>Font style</description></item>
            <item><term>TextAnchor:</term><description>Content anchor</description></item>
            <item><term>int:</term><description>Font size</description></item>
            <item><term>Color/DeSkinColor:</term><description>Font color</description></item>
            </list>
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Border(UnityEngine.GUIStyle,UnityEngine.RectOffset)">
            <summary>
            Sets the border of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Border(UnityEngine.GUIStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the border of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Background(UnityEngine.GUIStyle,UnityEngine.Texture2D,UnityEngine.Texture2D)">
            <summary>
            Sets the background of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.ContentOffset(UnityEngine.GUIStyle,UnityEngine.Vector2)">
            <summary>
            Sets the contentOffset of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.ContentOffset(UnityEngine.GUIStyle,System.Single,System.Single)">
            <summary>
            Sets the contentOffset of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.ContentOffsetX(UnityEngine.GUIStyle,System.Single)">
            <summary>
            Sets the X contentOffset of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.ContentOffsetY(UnityEngine.GUIStyle,System.Single)">
            <summary>
            Sets the Y contentOffset of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Margin(UnityEngine.GUIStyle,UnityEngine.RectOffset)">
            <summary>
            Sets the margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Margin(UnityEngine.GUIStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Margin(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.MarginLeft(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the left margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.MarginRight(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the right margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.MarginTop(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the top margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.MarginBottom(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the bottom margin of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Overflow(UnityEngine.GUIStyle,UnityEngine.RectOffset)">
            <summary>
            Sets the overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Overflow(UnityEngine.GUIStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Overflow(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.OverflowLeft(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the left overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.OverflowRight(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the right overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.OverflowTop(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the top overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.OverflowBottom(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the bottom overflow of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Padding(UnityEngine.GUIStyle,UnityEngine.RectOffset)">
            <summary>
            Sets the padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Padding(UnityEngine.GUIStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Padding(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.PaddingLeft(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the left padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.PaddingRight(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the right padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.PaddingTop(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the top padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.PaddingBottom(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the bottom padding of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Width(UnityEngine.GUIStyle,System.Single)">
            <summary>
            Sets the Y fixedWidth of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.Height(UnityEngine.GUIStyle,System.Int32)">
            <summary>
            Sets the fixedHeight of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.StretchHeight(UnityEngine.GUIStyle,System.Boolean)">
            <summary>
            Sets the stretchHeight property of the style
            </summary>
        </member>
        <member name="M:DG.DemiEditor.GUIStyleExtensions.StretchWidth(UnityEngine.GUIStyle,System.Boolean)">
            <summary>
            Sets the stretchWidth property of the style
            </summary>
        </member>
        <member name="T:DG.DemiEditor.DeStylePalette">
            <summary>
            Stores a GUIStyle palette, which can be passed to default DeGUI layouts when calling <code>DeGUI.BeginGUI</code>,
            and changed at any time by calling <code>DeGUI.ChangePalette</code>.
            You can inherit from this class to create custom GUIStyle palettes with more options.
            Each of the sub-options require a public Init method to initialize the styles, which will be called via Reflection.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeStylePalette.Init">
            <summary>
            Called automatically by <code>DeGUI.BeginGUI</code>.
            Override when adding new style subclasses.
            </summary>
        </member>
        <member name="T:DG.DemiEditor.DeStyleSubPalette">
            <summary>
            Extend any custom subpalettes from this, so they will be initialized correctly
            </summary>
        </member>
        <member name="T:DG.DemiEditor.DeGUILayout">
            <summary>
            GUILayout methods
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ShadedButton(UnityEngine.Color,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ShadedButton(UnityEngine.Color,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ShadedButton(UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ShadedButton(UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ColoredButton(UnityEngine.Color,UnityEngine.Color,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ColoredButton(UnityEngine.Color,UnityEngine.Color,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ColoredButton(UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ColoredButton(UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.PressButton(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Draws a button that returns TRUE the first time it's pressed, instead than when its released.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.PressButton(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Draws a button that returns TRUE the first time it's pressed, instead than when its released.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToolbarFoldoutButton(System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>Toolbar foldout button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,System.String,DG.DemiLib.DeColorPalette,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,UnityEngine.GUIContent,DG.DemiLib.DeColorPalette,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,System.String,UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.ToggleButton(System.Boolean,UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginToolbar(UnityEngine.GUILayoutOption[])">
            <summary>Begins an horizontal toolbar layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginToolbar(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begins an horizontal toolbar layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginToolbar(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>Begins an horizontal toolbar layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginToolbar(UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begins an horizontal toolbar layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.EndToolbar">
            <summary>Ends an horizontal toolbar layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.Toolbar(System.String,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>A toolbar with a label</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginVBox(UnityEngine.GUIStyle)">
            <summary>Vertical box layout with style and color options</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.BeginVBox(System.Nullable{UnityEngine.Color},UnityEngine.GUIStyle)">
            <summary>Vertical box layout with style and color options</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.EndVBox">
            <summary>End vertical box layout</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.HorizontalDivider(System.Nullable{UnityEngine.Color},System.Int32,System.Int32,System.Int32)">
            <summary>Horizontal Divider</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.DoubleClickTextField(UnityEditor.EditorWindow,System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click
            </summary>
            <param name="editorWindow">EditorWindow reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.DoubleClickTextField(UnityEditor.Editor,System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click
            </summary>
            <param name="editor">Editor reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.DoubleClickDraggableTextField(UnityEditor.EditorWindow,System.String,System.String,System.Int32,System.Collections.IList,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click and can also be dragged
            </summary>
            <param name="editorWindow">EditorWindow reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="dragId">ID for this drag operation (must be the same for both this and Drag</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
            <returns></returns>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.DoubleClickDraggableTextField(UnityEditor.Editor,System.String,System.String,System.Int32,System.Collections.IList,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click and can also be dragged
            </summary>
            <param name="editor">Editor reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="dragId">ID for this drag operation (must be the same for both this and Drag</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
            <returns></returns>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.GradientField(System.String,UnityEngine.Gradient,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a Gradient field by using Unity 4.x hidden default one and Reflection.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUILayout.SceneField(System.String,UnityEngine.Object)">
            <summary>Scene field</summary>
        </member>
        <member name="T:DG.DemiEditor.DeGUI">
            <summary>
            Global Demigiant GUI manager. Call <see cref="M:DG.DemiEditor.DeGUI.BeginGUI(DG.DemiLib.DeColorPalette,DG.DemiEditor.DeStylePalette)"/> to initialize it inside GUI calls.
            </summary>
        </member>
        <member name="F:DG.DemiEditor.DeGUI.colors">
            <summary>
            Default color palette
            </summary>
        </member>
        <member name="F:DG.DemiEditor.DeGUI.styles">
            <summary>
            Default style palette
            </summary>
        </member>
        <member name="F:DG.DemiEditor.DeGUI.IsProSkin">
            <summary>TRUE if we're using the PRO skin</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.BeginGUI(DG.DemiLib.DeColorPalette,DG.DemiEditor.DeStylePalette)">
            <summary>
            Call this at the beginning of GUI methods
            </summary>
            <param name="guiColorPalette">Eventual <see cref="T:DG.DemiLib.DeColorPalette"/> to use</param>
            <param name="guiStylePalette">Eventual <see cref="T:DG.DemiEditor.DeStylePalette"/> to use</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ExitCurrentEvent">
            <summary>
            Exits the current event correctly, also taking care of eventual drag operations
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ChangePalette(DG.DemiLib.DeColorPalette,DG.DemiEditor.DeStylePalette)">
            <summary>
            Changes the active palettes to the given ones
            (or resets them to the default ones if NULL)
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ResetGUIColors(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resets the GUI colors to the default ones (only available if BeginGUI was called first)
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.SetGUIColors(System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color})">
            <summary>
            Sets the GUI colors to the given ones
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ShadedButton(UnityEngine.Rect,UnityEngine.Color,System.String)">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ShadedButton(UnityEngine.Rect,UnityEngine.Color,System.String,UnityEngine.GUIStyle)">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ShadedButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.GUIContent)">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ShadedButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Shaded button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ColoredButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,System.String)">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ColoredButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,System.String,UnityEngine.GUIStyle)">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ColoredButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIContent)">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ColoredButton(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Colored button</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.PressButton(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>
            Draws a button that returns TRUE the first time it's pressed, instead than when its released.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.PressButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>
            Draws a button that returns TRUE the first time it's pressed, instead than when its released.
            </summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,System.String)">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,System.String,DG.DemiLib.DeColorPalette,UnityEngine.GUIStyle)">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.ToggleButton(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,DG.DemiLib.DeColorPalette,UnityEngine.GUIStyle)">
            <summary>Button that can be toggled on and off</summary>
            <summary>Button that can be toggled on and off</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.SceneField(UnityEngine.Rect,System.String,UnityEngine.Object)">
            <summary>Scene field</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.Box(UnityEngine.Rect,UnityEngine.Color,UnityEngine.GUIStyle)">
            <summary>Box with style and color options</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.DrawColoredSquare(UnityEngine.Rect,UnityEngine.Color)">
            <summary>Draws a colored square</summary>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.DoubleClickTextField(UnityEngine.Rect,UnityEditor.EditorWindow,System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click
            </summary>
            <param name="rect">Area</param>
            <param name="editorWindow">EditorWindow reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.DoubleClickTextField(UnityEngine.Rect,UnityEditor.Editor,System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click
            </summary>
            <param name="rect">Area</param>
            <param name="editor">Editor reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.DoubleClickDraggableTextField(UnityEngine.Rect,UnityEditor.EditorWindow,System.String,System.String,System.Int32,System.Collections.IList,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click and can also be dragged
            </summary>
            <param name="rect">Area</param>
            <param name="editorWindow">EditorWindow reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="dragId">ID for this drag operation (must be the same for both this and Drag</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
            <returns></returns>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.DoubleClickDraggableTextField(UnityEngine.Rect,UnityEditor.Editor,System.String,System.String,System.Int32,System.Collections.IList,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>
            A text field that becomes editable only on double-click and can also be dragged
            </summary>
            <param name="rect">Area</param>
            <param name="editor">Editor reference</param>
            <param name="id">A unique ID to use in order to determine if the text is selected or not</param>
            <param name="text">Text</param>
            <param name="dragId">ID for this drag operation (must be the same for both this and Drag</param>
            <param name="draggableList">List containing the dragged item and all other relative draggable items</param>
            <param name="draggedItemIndex">DraggableList index of the item being dragged</param>
            <param name="defaultStyle">Style for default (non-editing mode) appearance</param>
            <param name="editingStyle">Style for editing mode</param>
            <returns></returns>
        </member>
        <member name="M:DG.DemiEditor.DeGUI.FlatDivider(UnityEngine.Rect,System.Nullable{UnityEngine.Color})">
            <summary>Divider</summary>
        </member>
        <member name="M:DG.DemiEditor.SerializedPropertyExtensions.CastTo``1(UnityEditor.SerializedProperty)">
            <summary>
            Returns the value of the given property (works like a cast to type).
            <para>
            Improved from HiddenMonk's functions (http://answers.unity3d.com/questions/627090/convert-serializedproperty-to-custom-class.html)
            </para>
            </summary>
        </member>
        <member name="M:DG.DemiEditor.SerializedPropertyExtensions.IsArrayElement(UnityEditor.SerializedProperty)">
            <summary>
            Returns TRUE if this property is inside an array
            </summary>
        </member>
        <member name="M:DG.DemiEditor.SerializedPropertyExtensions.GetIndexInArray(UnityEditor.SerializedProperty)">
            <summary>
            Returns -1 if the property is not inside an array, otherwise returns its index inside the array
            </summary>
        </member>
        <member name="T:DG.DemiEditor.StringExtensions">
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:DG.DemiEditor.StringExtensions.Parent(System.String)">
            <summary>
            If the given string is a directory path, returns its parent
            with or without final slash depending on the original directory format
            </summary>
        </member>
        <member name="M:DG.DemiEditor.StringExtensions.FileOrDirectoryName(System.String)">
            <summary>
            If the string is a directory, returns the directory name,
            if instead it's a file returns its name without extension.
            Works better than Path.GetDirectoryName, which kind of sucks imho
            </summary>
        </member>
        <member name="T:DG.DemiEditor.TextureExtensions">
            <summary>
            Texture extensions
            </summary>
        </member>
        <member name="M:DG.DemiEditor.TextureExtensions.SetGUIFormat(UnityEngine.Texture2D,UnityEngine.FilterMode,System.Int32)">
            <summary>
            Checks that the texture uses the correct import settings, and applies them if they're incorrect.
            </summary>
        </member>
    </members>
</doc>
